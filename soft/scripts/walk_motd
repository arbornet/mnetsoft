#!/usr/bin/perl
#
# Perl program to add info about this weekend's walk to the motd
# Written by Valerie Mates, July 30, 2000.
# Fixed for OpenBSD - Mark Conger, Feb 22, 2005
#

# The name of the file with the official walk schedule in it:
$lunchlist = "/var/www/htdocs/lunch.txt";

# Address to e-mail the walk announcement to:
# IMPORTANT: put a \ before the @ in the e-mail address.
$mailto = "grexwalk\@egroups.com";

# The name of the file to write to.  (Change this for testing.)
$motd_file = "/etc/motd";

# The number of the walk item in the current Agora
$walk_item = 23;

# Open the motd file, and print the beginning of an announcement:
if (!open(MOTD, ">>$motd_file")) {
   die ("Could not append to $motd_file.");
}
print MOTD <<EOF;
Every Saturday at 10:30am Grexers walk in the Arb, then drive to a local
restaurant for lunch.  Join us?  See Agora item $walk_item.  Lunch this week is at
EOF

# Also start sending a message to the e-mail walk announcement list:
if (!open(MAIL, "|/usr/sbin/sendmail -t")) {
   die "Could not run sendmail to send walk announcement.  Error $!\n";
}

# Run the "date" program to figure out the date for this coming Saturday.
# Then split the date into the month and the day.

# This doesn't work in Open BSD.  Added GetSaturday subroutine - MAC 2/22/2005
#$saturday_date = `/usr/local/bin/gdate --date 'this Saturday' '+%b %d'`;
#($sat_month, $sat_day) = split(/\s+/, $saturday_date);

($sat_month, $sat_day) = &GetSaturday;

print MAIL <<EOF;
To: $mailto
From: "Grex Walk Robot" <krj\@cyberspace.org>
Subject: Weekly Walk Announcement

Lunch after this week's Grexwalk (Saturday, $sat_month $sat_day) will be at
EOF

# Now loop through the walk schedule, looking for this Saturday's walk.
$walk_loc = "";
if (!open(LUNCHLIST, "<$lunchlist")) {
   print "Could not read file $lunchlist.  Error $!\n";
} else {
   while (<LUNCHLIST>) {
      ($cur_month, $cur_day, @rest) = split(/\s+/);
      #print "Comparing cur month $cur_month, sat month $sat_month, cur day $cur_day, sat day $sat_day\n";
      if (($cur_month eq $sat_month) && ($cur_day == $sat_day)) {
         #print "...Match!\n";
         $walk_loc .= "@rest";
      }
   }
   close(LUNCHLIST);
}

# If we didn't find a location, just set it to this string:
if ($walk_loc eq "") {
   $walk_loc = "a location to be announced";
}

# Terminate with a period if necessary

# Write the walk location to both the motd and to the e-mail message.
print MOTD $walk_loc;
if ($walk_loc !~ /[.!?]$/) {
	print MOTD '.';
}
print MOTD "\n";

my $len = length($walk_loc);
my $line = '-' x $len;
print MAIL <<EOF;

  /-$line-\\
  | $walk_loc |
  \\-$line-/
EOF

# Now let's figure out if this is a Bird Hills walk.
# The first Saturday of the month always is.
# If it is, put it in both the motd and in the mail message.
if ($sat_day <= 7) {
   print MOTD "NOTE: This week's walk will be at Bird Hills Park.\n";
   print MAIL <<EOF;

*****
***** NOTE: THIS WEEK'S WALK WILL BE AT BIRD HILLS PARK.
*****
EOF
}

print MOTD "\n";
close(MOTD);

# Finish off our mail message and send it:
print MAIL <<EOF;

Discussion of the walk is in Agora item $walk_item.

(This message was generated by a program.)
.

EOF
close(MAIL);

# Returns the month and day of this week's Saturday
sub GetSaturday {
	my $t = time;
	my @timeparts = localtime $t;
	my $weekday = $timeparts[6];
	if ($weekday < 6) {
		$t += (6-$weekday)*24*60*60;
	}
	my $timestr = localtime $t;
	@timeparts = split(/\s+/, $timestr);
	return @timeparts[1,2];
}

