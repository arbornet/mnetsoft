% Backtalk Papaya Interface -- (c) 2002, Jan Wolter, Steve Weiss
%
% setinew script
%
% The "setinew" script is a form from which the fairwitness of a conference
% can select which items will be initially new for new users.  This script
% is its own form handler.
%
% Query Parameters:
%    conf=		Name of the conference to edit.
%    csel=		Passed through
%    list=		Passed through
%
%    which=             Which items to make new: "all", "some" or "none"
%    do_since=          If true, use the new_since value
%    days_since=        Number of days since
%    isel=              List of selected items

flavor(config)+ include

% Output the form
(
<HTML>
<HEAD>
<TITLE>)bbsname(: Set initial new items for )/conftitle(</TITLE>
</HEAD>)

% Open the conference
flavor(openconf)+ stopped {
  ( Backtalk internal error: No such )Conference( \()conf(\)\n) halt}
if

global_header

amfw ! {`(You are not a )Fairwitness( of the )'conf`( )Conference(\n)'halt} if

/which defined {

  % Set the new values
  /new_since 0 def
  which (all) eq {
    /new_isel (1-$) def
  } {
    which (none) eq {
      /new_isel () def
    } {
      /do_since defined { do_since {
        /new_since /days_since defined {days_since cvi}{7}ifelse def
      } if } if
      /new_isel isel def
    } ifelse
  } ifelse

  (*settings) [/new_isel /new_since] savevar

  clear flavor(/confhome)+ jump
} if

% load the current settings
/new_isel (1,$) def
/new_since 0 def
(*settings) [/allowhtml /new_isel /new_since] loadvar pop
new_isel (1-$) eq {/new_since 0 def} if

% form header
(<FORM ACTION=setinew>
<INPUT TYPE=hidden NAME=conf VALUE=)conf(>\n)
csel {(<INPUT TYPE=hidden NAME=csel VALUE=")csel(">\n)} if
/list defined {(<INPUT TYPE=hidden NAME=list VALUE=")list(">\n)} if

(<INPUT TYPE=radio NAME=which VALUE=all> Make <STRONG>ALL</STRONG> )Items
( new when a newuser joins.
<P>
<INPUT TYPE=radio NAME=which VALUE=none> Make <STRONG>NO</STRONG> )Items
( new when a newuser joins.
<P>
<INPUT TYPE=radio NAME=which VALUE=some CHECKED> Make the )Items( selected below
new when a newuser joins.
)


% new_since checkbox

(<BLOCKQUOTE>
<INPUT TYPE=checkbox NAME="do_since" VALUE=1)
new_since {( CHECKED)} if
(>&nbsp;&nbsp;<EM>Any )Items( that have been responded to in the last
<INPUT TYPE=text NAME="days_since" SIZE=3 VALUE=)
new_since {new_since}{7} ifelse (> days</EM><P>\n)

% List the items

/isel (1-$) store	% selector for all items
/showforgotten 1 store	% show forgotten items as well as unforgotten items
/cnt 0 def		% initial counter for number of items

% begin loop for each item 
{
  % get the next item
  isel next_item
  {
    break	% next_item failed - no more items
  }{
    this_item
    {
      break	% this_item failed - shouldn't happen
    }{
      % save new item selector
      pop /isel xstore 
  
      (<INPUT TYPE=checkbox NAME="isel" VALUE=)item
      dup new_isel in_sel {( CHECKED)} if
      (>&nbsp;#)item(: )
    
      % print item number and title
      (0) read_item {pop (Internal error "read_item") halt} if
      title

      % print status flags
      retired {( [retired])} if
      frozen {( [frozen])} if
      linked {( [linked])} if
      (<BR>\n)

      % update count
      /cnt inc
    } ifelse
  } ifelse
} loop
cnt 0 eq {
  % If there are no items, offer a checkbox for the first item anyway
  (<INPUT TYPE=checkbox NAME="isel" VALUE=1)
  1 new_isel in_sel {( CHECKED)} if
  `(>&nbsp;&nbsp;<EM>Future first )Item(</EM><BR>\n)'
} if
% Add a checkbox for the last item.
(<P><INPUT TYPE=checkbox NAME="isel" VALUE="$")
new_isel ($) 0 search 0 gt {( CHECKED)} if
(>&nbsp;<EM>&nbsp;&nbsp;The last )Item(</EM><BR>
</BLOCKQUOTE>
<INPUT TYPE=submit VALUE="Change Settings">
</FORM>
)
flavor(footer)+ chain
