% Backtalk Pistachio Interface -- (c) 1996, Jan Wolter, Steve Weiss
%
% response preview script
%
% A script to preview a response to an item.  This is a form handler for the
% response form on the bottom of the screen generated by "read.mktext.bt"
%
% Query Parameters:
%    text=	text of response to post
%    texttype=  type of text ("text/html" or "text/plain")
%    thisresp=  number of previewed response.
%    lastresp=  total number of responses.
%    pseudo=    name to post response under
%    hidden=    true if user wanted response posted hidden (ignored)
%    conf=      conference to post in.
%    language=  language to spellcheck in

flavor(config)+ include

canspell {
  /language defined ! {/language () def} if
  language (OFF) eq {
    /spellon 0 def
  } {
    /spell_lang language store
    /spellon 1 def
  } ifelse

  % <text> dospell <text>
  % Find all the mispelled words and highlight them, if spellchecking is on
  /dospell {
    spellon {
      ` exch (text/html) 1
        {(<FONT COLOR=)highcolor(>)4 -1 roll(</FONT>)}
      spellcheck '
    } if
  } def
} if

% decide if we are running with frames
/frames browser 3 ge def (*.backtalk) /frames loadvar pop

(<HTML>
)
frames ! {(<HEAD>
<TITLE>Response Preview</TITLE>
)/metatags(</HEAD>
)} if

flavor(openconf)+ stopped {
  (Backtalk internal error: No such )Conference( \()conf(\)\n) halt
} if

frames ! {global_header} if

(*settings) /allowgraphics loadvar pop

/now time def


(<H1>Preview of how your response will look to other Backtalk users:</H1>
<HR><P>
<B>#)thisresp( of )lastresp( by <I>)
pseudo quote(</I> \(<A HREF="bio?login=)id(">)id expand(</A>\) on )
now ctime (:</B><P>\n)

texttype (text/plain) eq {
  % Plain Text
  (<PRE>)
  text 79 wrap expand canspell {dospell} if
  (</PRE>)
  /text_interface constant {
     /plain () def
  } if
}{
  texttype (text/html) eq {
    % HTML Text
    text cleanhtml
    /text_interface constant {
      dup unhtml /plain xdef
    } if
    canspell {dospell} if
  }{
    % Lazy-HTML Text
    text (\r) () 0 replace
    (\n\n) (\n<P>\n) 0 replace
    cleanhtml
    /text_interface constant {
      dup unhtml /plain xdef
    } if
    canspell {dospell} if
  } ifelse
  (<BR CLEAR=ALL>\n)
} ifelse

(<HR>\n)
canspell {
  (<FORM ACTION=resp_preview>
  <INPUT TYPE=hidden NAME=text VALUE=")text quote(">
  <INPUT TYPE=hidden NAME=texttype VALUE=")texttype quote(">
  <INPUT TYPE=hidden NAME=thisresp VALUE=")thisresp(">
  <INPUT TYPE=hidden NAME=lastresp VALUE=")lastresp(">
  <INPUT TYPE=hidden NAME=pseudo VALUE=")pseudo quote(">
  <INPUT TYPE=hidden NAME=hidden VALUE=")hidden(">
  <INPUT TYPE=hidden NAME=conf VALUE=")conf(">
  Spellchecking: <SELECT NAME=language>\n)
  language ! {(<OPTION VALUE="">Default Language\n)} if
  [languages (,) split] {
    /l xdef
    (<OPTION VALUE=")l(") language l eq {( SELECTED)}if (>)l cap(\n)
  } forall
  (<OPTION VALUE="OFF") language (OFF) eq {( SELECTED)}if (>Off
  </SELECT><INPUT TYPE=submit VALUE="Recheck">)
  language (OFF) ne {(&nbsp;&nbsp;&nbsp;&nbsp;
  Possible misspelled words are <FONT COLOR=)highcolor
  (>highlighted</FONT>.)} if
  (\n)
} if

/text_interface constant {
  plain {
    (<H1>Preview of how your )Response( will look to )text_interface+
    ( users:</H1>\n)+
    (<HR><P><PRE>\n)+
    (#)thisresp( of )lastresp( by )pseudo quote( \()id quote(\) on )
    now ctime(:\n\n)
    plain expand
    (</PRE>\n<HR>\n)
  } if
} if

(<P>Use your browser's "Back" button to return to the response form
)
global_footer
(</BODY>
</HTML>
)
