#!/usr/bin/perl
# Copyright 2001, Jan D. Wolter, All Rights Reserved.
#
#  FrontTalk - A Command-Line Interface to Backtalk - Picospan Clone Version

$VERSION= "0.9.2";

use lib "/home/jan/src/backtalk/fronttalk/lib";

# We only load core stuff now.  Other stuff may be linked in as needed.
require "config.pl";
require "if_core.pl";
require "net_core.pl";
require "sep.pl";
require "range.pl";
require "pager.pl";
require "cmd.pl";
require "cmd_set.pl";
require "cmd_define.pl";
require "cmd_read.pl";
require "cmd_join.pl";
require "readline.pl";


# ($flag, $login, $passwd)= login_callback($allowanon,$name)
#   This gets called by the Fronttalk Interface whenever a login and password
#   are required to access a remote Backtalk system.  The name of the system
#   and a flag telling if it allows anonoymous access are passed in.  We
#   return a list containing an return code, a login and a password.  If no
#   login is given, we return (1,undef,undef).  If an EOF is given we return
#   (0,undef,undef) indicating that we want to abort the command.  We do output
#   on stderr, in case a pager is running.

sub login_callback {
    my ($l,$p);

    if ($_[0])
    {
    	print STDERR
	    "Login for full access to $_[1] or hit return to observe only\n";
    }
    else
    {
	print STDERR "Login required to access $_[1]\n";
    }

    print STDERR "login: ";
    $l= <STDIN>;
    return (0,undef,undef) if !defined $l;
    chop($l);
    $l !~ /^\s*$/ or return (1, undef, undef);

    echo(0);
    print STDERR "password: ";
    chop($p= <STDIN>);
    print STDERR "\n";
    echo(1);

    return (1, $l, $p);
}

sub Fail {
    print "Error: ",@_,"\n";
    exit(1);
}


# sigint()
#  Signal handler for interupts.

sub sigint {
    $SIG{INT}= \&sigint;
    echo(1);
    if ($initialized)
    {
	ft_killchild();
	die("Interrupt!\n");
    }
    else
    {
	print "\n";
	exit(1);
    }
}


# sigpipe()
#  Signal handler for pager death.  These seem to arrive in flurries, but we
#  only want to die() once per child so we use a count to protect against
#  swarms.

sub sigpipe {
    $SIG{PIPE}= \&sigpipe;
   return if $sigpipe_cnt++ > 0;
   ft_killchild();
   die("Broken Pipe!\n");
}


# ------------------------------ MAIN PROGRAM -----------------------------


# Parse command line arguments
for ($i= 0; $i < @ARGV; $i++)
{
    if ($ARGV[$i] =~ /^-/)
    {
     	foreach $flag (split //,substr($ARGV[$i], 1))
	{
	    if ($flag eq 'd')
	    {
	    	$debug= 1;
	    }
	}
    }
    else
    {
    	$conf= $ARGV[$i];
    }
}

# Split system name from conference name
if ($conf =~ /^([^:]*):(.*)$/)
{
    $sysalias= $1;
    $conf= $2;
}

print "System=$sysalias Conference=$conf\n" if $debug;

$AGENT= "FrontTalk $VERSION";
print "$AGENT\n";
print "Copyright 2001-2005, Jan Wolter\n\n";

$SIG{INT}= \&sigint;

# Find .cfdir and check for local .cfonce and .cfrc files
$homedir= (getpwuid($<))[7];
$cfdir= "$homedir/.cfdir";
-d $cfdir or $cfdir= $homedir;
$cfonce= "$cfdir/.cfonce";
-e $cfonce or $cfonce= undef;
$cfrc= "$cfdir/.cfonce";
-e $cfrc or $cfrc= undef;

pager_init();

# Initialize FrontTalk interface
ft_init($SYSLIST, \&login_callback);
if ($ft_err)
{
    print "Could not initialize interface\n$ft_errmsg\n";
    exit;
}


# get handle for conferencing system
$sysh= ft_connect($sysalias);
if ($ft_err)
{
    print "\nConnect",($sysh->{alias} ? " to '$sysh->{alias}'" : ''),
    	" failed.\n$ft_errmsg.\n";
    exit;
}

if ($debug)
{
    my $x;
    print "SYSTEM INFORMATION:\n";
    print "name=$sysh->{name}\n";
    print "login=$sysh->{login}\n";
    print "anon=$sysh->{anon}\n";
    print "pwurl=$sysh->{pwurl}\n";
    print "banner='$sysh->{banner}'\n";
    print "cflist=";
    foreach $x (@{$sysh->{cflist}})
    {
    	print "'$x' ";
    }
    print "\n";
}

if (!$sysh)
{
    print STDERR "Unable to connect to server $sysalias\n";
    exit(1);
}

print "Connected to $sysh->{name} server";
print " (version $sysh->{version} - ",
    $sysh->{direct}?'direct':(($sysh->{secure}?'':'in').'secure network'),')'
    if $sysh->{version};
print "\n\n",$sysh->{banner};

# initialize variables and settings then by setting defaults and then
# running top-level rc files:  /bbs/rc, remote .cfonce, local .cfonce
sysrc();

# set up and compile any default separators that weren't overridden
init_def();

$sysh->{cfindex}= -1;

if (flagval('default'))
{
    # Choose start up conference - command line, or .cflist, or default
    if (!$conf)
    {
	if ($conf= ${$sysh->{cflist}}[0])
	{
	    # first conference in user's .cflist
	    $sysh->{cfindex}= 0;
	}
	else
	{
	    # default conference from system conflist file
	    $conf= '?';
	}
    }

    $confh= join_conf($sysh, $conf);
    if (!$confh)
    {
	print STDERR "Conference $conf not found on ",$sysh->{name},"\n";
    }
}


# Main Command Loop
$cmd_source= 6;
$remote_source= 0;
$initialized= 1;	# from now on, interrupts don't cause exit
$SIG{PIPE}= \&sigpipe;
while (1)
{
    eval { do_ok_prompt() };
    if ($@)
    {
    	print "\n$@";
	pager_off();
    }
    else
    {
	last;
    }
}

# Say goodbye to last conference, if any.
print exec_sep($defhash{loutmsg},0,$confh,1) if defined $conf;
